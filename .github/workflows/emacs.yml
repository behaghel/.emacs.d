name: Emacs configuration test

on:
  push:
    branches: [ main ]
  pull_request:

jobs:

  warm-cache:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Emacs
        uses: jcs090218/setup-emacs@master
        with:
          version: '30.2'

      - name: Detect Emacs version
        id: emacs-version-warm
        run: |
          v=$(emacs --batch --eval '(princ emacs-version)')
          echo "version=$v" >> "$GITHUB_OUTPUT"

      - name: Cache straight.el and eln-cache (warm)
        id: straight-cache-warm
        uses: actions/cache@v4
        with:
          path: |
            ${{ github.workspace }}/straight/repos
            ${{ github.workspace }}/straight/build
            ${{ github.workspace }}/straight/build-cache.el
            ${{ github.workspace }}/straight/versions/default.el
            ${{ github.workspace }}/eln-cache
          key: straight-${{ runner.os }}-emacs-${{ steps.emacs-version-warm.outputs.version }}-versions-${{ hashFiles('straight/versions/default.el') }}
          restore-keys: |
            straight-${{ runner.os }}-

      - name: Warm straight cache via full load
        run: |
          export HOME=$GITHUB_WORKSPACE
          export HUB_FORCE_FULL_LOAD=1
          emacs --batch -l scripts/ci-warm-all.el

  load-config:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Emacs
        uses: jcs090218/setup-emacs@master
        with:
          version: '30.2'

      - name: Detect Emacs version
        id: emacs-version
        run: |
          v=$(emacs --batch --eval '(princ emacs-version)')
          echo "version=$v" >> "$GITHUB_OUTPUT"

      - name: Cache straight.el and eln-cache
        id: straight-cache
        uses: actions/cache@v4
        with:
          path: |
            ${{ github.workspace }}/straight/repos
            ${{ github.workspace }}/straight/build
            ${{ github.workspace }}/straight/build-cache.el
            ${{ github.workspace }}/straight/versions/default.el
            ${{ github.workspace }}/eln-cache
          key: straight-${{ runner.os }}-emacs-${{ steps.emacs-version.outputs.version }}-versions-${{ hashFiles('straight/versions/default.el') }}
          restore-keys: |
            straight-${{ runner.os }}-

      - name: Report cache status (pre-run)
        run: |
          echo "Cache hit: ${{ steps.straight-cache.outputs.cache-hit }}"
          for d in straight/repos straight/build eln-cache; do
            p="${{ github.workspace }}/$d"
            if [ -d "$p" ]; then
              du -sh "$p" || true
            else
              echo "Missing: $d"
            fi
          done

      - name: Architecture lint
        run: |
          export HOME=$GITHUB_WORKSPACE
          emacs --batch -l init.el -l scripts/lint-architecture.el

      - name: Full config load (forced interactive)
        run: |
          export HOME=$GITHUB_WORKSPACE
          export HUB_FORCE_FULL_LOAD=1
          emacs --batch -l scripts/ci-load-all.el

      - name: Pre-commit checks (elisp format + checkdoc)
        run: |
          export HOME=$GITHUB_WORKSPACE
          chmod +x scripts/elisp-format scripts/elisp-checkdoc
          mapfile -t el_files < <(git ls-files "*.el")
          if [ ${#el_files[@]} -gt 0 ]; then
            ./scripts/elisp-format "${el_files[@]}"
            ./scripts/elisp-checkdoc "${el_files[@]}"
          fi

      - name: Tangle literate config
        run: |
          emacs --batch -l org --eval '(org-babel-tangle-file "docs/config.org")'

      - name: Load init file
        run: |
          export HOME=$GITHUB_WORKSPACE
          emacs --batch -l init.el --eval '(message "Loaded init.el")' --kill

      - name: Run ERT smoke tests
        run: |
          export HOME=$GITHUB_WORKSPACE
          emacs --batch -l ert -l test/smoke.el -f ert-run-tests-batch-and-exit

      - name: Run ERT module tests (changed on PR)
        if: github.event_name == 'pull_request'
        run: |
          export HOME=$GITHUB_WORKSPACE
          # Detect any changes under modules/ or test/
          git fetch --no-tags --depth=1 origin +${{ github.event.pull_request.base.ref }}:refs/remotes/origin/${{ github.event.pull_request.base.ref }}
          CHANGED=$(git diff --name-only origin/${{ github.event.pull_request.base.ref }}... | grep -E '^(modules/.+\.el|test/.+\.el)$' || true)
          if [ -n "$CHANGED" ]; then
            echo "Changed files:
$CHANGED"
            # Run all tests for simplicity when modules/tests changed in PR
            emacs --batch -l ert -l test/test-helpers.el -l test/perspective-auto-test.el -f ert-run-tests-batch-and-exit
          else
            echo "No module/test changes detected; skipping module tests."
          fi

      - name: Run all ERT module tests (pushes)
        if: github.event_name == 'push'
        run: |
          export HOME=$GITHUB_WORKSPACE
          if ls test/*-test.el >/dev/null 2>&1; then
            emacs --batch -l ert -l test/test-helpers.el -l test/perspective-auto-test.el -f ert-run-tests-batch-and-exit
          else
            echo "No module tests present"
          fi

      - name: Report cache status (post-run)
        if: always()
        run: |
          for d in straight/repos straight/build eln-cache; do
            p="${{ github.workspace }}/$d"
            if [ -d "$p" ]; then
              du -sh "$p" || true
            else
              echo "Missing: $d"
            fi
          done
